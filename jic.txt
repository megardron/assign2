/*
 * msg_proc.c: implementation of the remote procedure "printmessage"
 *
 * Source: ?Using rpcgen?, http://www.cisco.com/en/US/docs/ios/sw_upgrades/interlink/r2_0/rpc_pr/rprpcgen.html
 */

#include <stdio.h>
#include <stdlib.h>
#include <rpc/rpc.h>	/* always needed */
#include "msg.h"	/* need this too: msg.h will be generated by rpcgen */

/*
 * Remote verson of "printmessage"
 */

int append_l = 7;
int count_l = 6;
int find_l = 5;
//todo: 
	//return strings
	//first word
	//partial matches
int get_next_sentence(FILE *f, char *sen) {
	if (f==NULL) return -1;
	fscanf(f, "%100c", sen);
	for (int i = 0; i<100; i++) {
		if (*(sen+i)=='\n') {
			*(sen+i) = '\0';
			return i+1;
		}
	}
	return -1;
}

int *append_1_svc (char **msg, struct svc_req *rqstp) {
	static int result; /* must be static! */
	FILE *f;

	f = fopen("output.txt", "a");// opens output file 
	if (f == NULL) 
	{
		result = 0;
		return (&result);
	}
	char s[100];
	char *m = s;
	strncpy(m, *msg+append_l, strlen(*msg)-append_l-1);
	s[strlen(*msg)-append_l-1] = '\0';
	fprintf(f, "\n%s", m);//writes message
	fclose(f);

	result = 1;
	return (&result);
}

int *delete_1_svc (char **msg, struct svc_req *rqstp) {
	static int result; /* must be static! */
	FILE *f;

	char s[100]; //get rid of word and brackets
	char *m = s;
	strncpy(m, *msg+append_l, strlen(*msg)-append_l-1);
	s[strlen(*msg)-append_l-1] = '\0';
	printf("%s\n", m);
	f = fopen("output.txt", "r");// opens output file 
	if (f == NULL) 
	{
		result = 0;
		return (&result);
	}
	fseek(f,0, SEEK_END);
	int l = ftell(f);
	fseek(f,-l,SEEK_END);
	
	char t[l];
	char * temp = t;
	char * format;
	
	sprintf(format, "%c%d%c\0", '%', l, 'c');
	fscanf(f, format, temp);
	fclose(f);
	char t2[l];
	char * temp2 = t2;
	char *x = temp;
	while (temp = strstr(temp,m)){
		printf("%s \n %s  %d\n", temp+strlen(m)+1, temp2, strlen(m));
		strcpy (temp2, temp);
		strcpy(temp, temp+strlen(m)+1);
		//printf("%s\n", temp);
		temp = temp+strlen(m)+1;
		
	}
	fopen("output.txt", "w");
	if (f ==NULL) {
		result = 0;
		return &result;
	}
	printf("\n\n\n\n\n\n");
	fprintf(f, "%s\n", x);
	fclose(f);

	result = 1;
	return (&result);
}

char *find_1_svc (char **msg, struct svc_req *rqstp){
	static char result;
	FILE *f;
	printf("why ?\n");
	int x;
	char s[100]; //get rid of word and brackets
	char *m = s;
	printf("???\n");
	strncpy(m, *msg+find_l, strlen(*msg)-find_l-1);
	printf("%s\n", m);
	s[strlen(*msg)] = '\0';
	printf("%d\n", m);
	x = atoi(m);
	printf("%d\n", x);

	f = fopen("output.txt", "r");// opens output file 
	if (f == NULL) 
	{
		result = 0;
		return (&result);
	}
	fseek(f,0, SEEK_END);
	int l = ftell(f);
	fseek(f,-l,SEEK_END);
	
	char t[l];
	static char * temp;
	temp = t;
	char * format;
	//sprintf(format, "%c%d%c\0", '%', l, 'c');
	fscanf(f, "%500c", temp);
	for (int i=0; i<x-1;i++) {
		int n = 0;
		while (*(temp+n)!= '\n'){
			//printf("%c, %d\n", *(temp+n), n);
			n++;
		}
		strcpy(temp, temp+n+1);
		//printf("%s %d\n", temp, i);
	}
	int n= 0;
	while (*(temp+n)!= '\n'){
		n++;
	}
	*(temp+n) = '\0';
	static char t2;
	t2 = *temp;
	return &t2;
	
}

int *remove_1_svc (char **msg, struct svc_req *rqstp){
	static int result; /* must be static! */
	FILE *f;

	char s[100]; //get rid of word and brackets
	char *m = s;
	strncpy(m, *msg+append_l, (strlen(*msg)-append_l-1));
	s[strlen(*msg)-append_l-1] = '\0';



	f = fopen("output.txt", "r");// opens output file 
	if (f == NULL) 
	{
		result = 0;
		return (&result);
	}
	fseek(f,0, SEEK_END);
	int l = ftell(f);
	fseek(f,-l,SEEK_END);
	
	char t[l];
	char * temp = t;
	char * format;
	
	sprintf(format, "%c%d%c\0", '%', l, 'c');
	fscanf(f, format, temp);
	fclose(f);
	char t2[l];
	char * temp2 = t2;
	char *x = temp;
	while (temp = strstr(temp,m)){
		printf("%s \n %s  %d\n", temp+strlen(m)+1, temp2, strlen(m));
		strcpy (temp2, temp);
		strcpy(temp, temp2+strlen(m)+1);
		printf("%s\n", temp);
		temp = temp+strlen(m)+1;
		
	}
	fopen("output.txt", "w");
	if (f ==NULL) {
		result = 0;
		return &result;
	}
	printf("\n\n\n\n\n\n");
	fprintf(f, "%s\n", x);
	fclose(f);

	result = 1;
	return (&result);
}

int *search_1_svc (char **msg, struct svc_req *rqstp){
	static int result;
	FILE *f;
	printf("starting search\n");
	int x;
	char s[100]; //get rid of word and brackets
	char *m = s;
	strncpy(m, *msg+append_l, strlen(*msg)-append_l-1);
	s[strlen(*msg)-append_l-2] = '\0';
	printf("%s\n", m);
	

	f = fopen("output.txt", "r");// opens output file 
	if (f == NULL) 
	{
		result = 0;
		return (&result);
	}
	printf("%s\n", m);
	fseek(f,0, SEEK_END);
	int l = ftell(f);
	fseek(f,-l,SEEK_END);
	
	char t[l];
	static char * temp;
	temp = t;
	char * format;
	//sprintf(format, "%c%d%c\0", '%', l, 'c');
	fscanf(f, "%500c", temp);
	printf("%s\n", m);
	char * temp2 = strstr(temp,m);
	printf("%s\n", m);
	int n = 0;
	printf("before while\n");
	while (*(temp2-n)!= '\n'){
		printf("%c, %d\n", *(temp2-n), n);
		n++;
	}
	printf("after first\n");
	temp2 = temp2-n;
	printf("temp %s\n", temp);
	printf("temp2 %s\n", temp2);
	while (*(temp+n)!= '\n'){
		n++;
	}
	*(temp+n) = '\0';
	printf("the return is %s\n", temp);
	
	strcpy(*msg, temp);
	printf("%s\n", *msg);
	result = 1;
	printf("and assigning result\n");
	return (&result);
}

int *count_1_svc (char **msg, struct svc_req *rqstp) { //fix for first being the thing you want

	static int result; /* must be static! */
	FILE *f;

	char s[100]; //get rid of word and brackets
	char *m = s;
	strncpy(m, *msg+count_l, strlen(*msg)-count_l-1);
	s[strlen(*msg)-count_l-1] = '\0';
	printf("%s\n", m);
	f = fopen("output.txt", "r");// opens output file 
	if (f == NULL) 
	{
		result = 0;
		return (&result);
	}
	fseek(f,0, SEEK_END);
	int l = ftell(f);
	fseek(f,-l,SEEK_END);
	int count = 0;
	char t[l];
	char * temp = t;
	char * format;
	sprintf(format, "%c%d%c\0", '%', l, 'c');
	fscanf(f, format, temp);
	while (temp = strstr(temp+strlen(m),m)){
		count++;
	}

	fclose(f);

	result = count;
	return (&result);
}
